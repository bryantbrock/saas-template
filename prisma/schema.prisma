// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  email       String       @unique
  name        String?
  image       UserImage?
  password    Password?
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model UserImage {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  altText     String?
  contentType String
  blob        Bytes
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expirationDate DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String   @default("")
  roles       Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       @unique
  description String       @default("")
  users       User[]
  permissions Permission[]
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  type      String /// The type of verification, e.g. "email" or "phone"
  target    String /// The thing we're trying to verify, e.g. a user's email or phone number
  secret    String /// The secret key used to generate the otp
  algorithm String /// The algorithm used to generate the otp
  digits    Int /// The number of digits in the otp
  period    Int /// The number of seconds the otp is valid for
  charSet   String /// The valid characters for the otp
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  providerName String
  providerId   String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String

  @@unique([providerName, providerId])
}
